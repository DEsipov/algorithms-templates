#!-*-coding:utf-8-*-
__author__ = 'vi'


def broken_search(nums, target) -> int:
    """Бинарный поиск в 'сломанном' списке.
    Args:
        nums (List): массив, бывший отсортированным в кольцевой структуре
        target ([type]): искомый эл-т
    Returns:
        int: индекс искомого эл-та, или -1 если не найден

    Алгоритм поиска:
    Массив делится на две части посередине.

    Одна точно должна быть упорядоченна.

    Если часть отсортирована, легко проверяется, входит ли в неё X.

    Итого:
    За left, right берутся индексы первого и последнего эл-тов.

    В цикле пока диапазон не схлопнется:
    Делим на части.
    Проверяем mid == X.
    Если левая сортирована:
        если X входит:
            индексы левой для след. итерации
        иначе:
            индексы правой для след. итерации
    иначе:
        если X входит:
            индексы правой для след. итерации
        иначе:
            индексы левой для след. итерации
    след. итерация
    При сужении диапазона до двух эл-тов, проверка на сортированность
    сравнивает один и тот же эл-т с собой. В условии необходимо '='.
    """
    # Указатели.
    left, right = 0, len(nums) - 1

    # Пока не схлопнутся.
    while left <= right:

        # Берем опорный элемент из серединки. Проверяем, не искомый ли он?
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid

        # Левый половинка.
        # Если значение левого указателя меньше опорного,
        # значит отсортированная половинка и в ней ищем элемент.
        if nums[left] <= nums[mid]:
            # Если искомый элемент больше левого указателя  меньше опорного.
            # Правый указатель сдвигаем к опорному.
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                # Иначе сдвигаем левый указатель к опорному.
                left = mid + 1
        else:
            # Аналогично и с правой частью.
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    return -1
